1. idea 1 parrafo              	idea principal
2. historia de usuario 		encuesta 
3. mockup / wireframe    	diseño , boceto de la UI
distribuir parte (Un remix) 
analiss datos E-R

acceso api 
3,4 actividades
algun permiso
algun curioso como redireccion a algo
usuario

https://www.youtube.com/watch?v=0x5kmLY16qE
https://www.jb51.net/article/127256.htm


NOMENCRATURA PARA ID ejem: asdhsad_adssad_ssdsad
principal_
lFragment_
lVMFactory_textV_
principal_floatingAB_aniadir

https://blog.csdn.net/lxbjkben/article/details/103025207?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-5-103025207-blog-49201071.235%5Ev43%5Epc_blog_bottom_relevance_base5&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-5-103025207-blog-49201071.235%5Ev43%5Epc_blog_bottom_relevance_base5&utm_relevant_index=10


Claro, aquí tienes una descripción detallada de los procesos de inicio de sesión desde la interfaz de usuario hasta el acceso a los datos y la autenticación:

1. **Interfaz de Usuario (UI)**:
   - El proceso comienza cuando el usuario abre la aplicación y accede a la pantalla de inicio de sesión.
   - En esta pantalla, el usuario puede ingresar su nombre de usuario y contraseña para iniciar sesión.

2. **ViewModel**:
   - Cuando el usuario ingresa sus credenciales y presiona el botón de inicio de sesión, la acción se envía al `ViewModel`.
   - El `ViewModel` es responsable de manejar la lógica de la interfaz de usuario y la comunicación con el repositorio de datos para realizar la autenticación.

3. **Repositorio de Datos (LoginRepository)**:
   - El `ViewModel` interactúa con el `LoginRepository`, que es responsable de manejar la autenticación y recuperar la información del usuario.
   - Si el usuario intenta iniciar sesión, el `ViewModel` llama al método `login` del `LoginRepository`.

4. **Fuente de Datos (LoginDataSource)**:
   - El `LoginRepository` utiliza la fuente de datos `LoginDataSource` para realizar la autenticación.
   - En la fuente de datos, se realiza la lógica de autenticación real, como enviar las credenciales del usuario a un servidor remoto para su validación.

5. **Autenticación**:
   - En la fuente de datos, se autentican las credenciales del usuario.
   - Si las credenciales son válidas, se crea un `LoggedInUser` que representa al usuario autenticado y se devuelve al `ViewModel`.
   - Si las credenciales son inválidas o hay algún error durante el proceso de autenticación, se devuelve un error al `ViewModel`.

6. **ViewModel (Continuación)**:
   - Una vez que el `ViewModel` recibe la respuesta del `LoginRepository`, actualiza su estado en consecuencia.
   - Si la autenticación fue exitosa, el `ViewModel` puede almacenar la información del usuario en su estado y notificar a la interfaz de usuario que el usuario ha iniciado sesión correctamente.
   - Si la autenticación falló, el `ViewModel` puede notificar a la interfaz de usuario sobre el error y proporcionar un mensaje de error adecuado.

7. **Interfaz de Usuario (UI) (Continuación)**:
   - La interfaz de usuario recibe las actualizaciones del `ViewModel` y refleja el estado actual del proceso de inicio de sesión.
   - Si el usuario inició sesión correctamente, la interfaz de usuario puede navegar a la pantalla principal de la aplicación o realizar alguna otra acción específica después del inicio de sesión.

Este es el flujo básico de inicio de sesión en una aplicación Android utilizando arquitectura MVVM y el patrón de repositorio. Cada componente juega un papel importante en el proceso para garantizar una experiencia de usuario fluida y segura.